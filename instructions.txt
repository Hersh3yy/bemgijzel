# Nuxt 4 + Nuxt UI Project Setup & Design System Guidelines

## Project Structure
This project uses Nuxt 3 with compatibility version 4, which means client-side code is in `app/`. In Nuxt 3, components are auto-imported and named based on directory structure.

**Component Naming Convention:**
- `components/Album/Image.vue` = `<AlbumImage>`
- `components/Base/Button.vue` = `<BaseButton>`
- `components/Contact/Form.vue` = `<ContactForm>`

## Nuxt 4 Compatibility
This project uses `compatibilityVersion: 4` to opt into Nuxt 4 behavior:

```typescript
// nuxt.config.ts
export default defineNuxtConfig({
  future: {
    compatibilityVersion: 4,
  },
})
```

**Directory Structure:**
- `app/` - All client-side code (components, pages, layouts, etc.)
- `server/` - Server-side code (API routes, etc.)
- `public/` - Static assets
- `nuxt.config.ts` - Configuration (stays in root)

## Design System Strategy

### 1. CSS & Styling Philosophy
- **Primary**: Use Tailwind CSS classes as much as possible
- **Secondary**: Raw CSS only when absolutely necessary
- **Atomic Design**: Build reusable components with props for variants

### 2. Component Architecture

#### Base Components (`components/Base/`)
These are your atomic design building blocks. Each should:
- Have clear, semantic props for variants
- Encapsulate their own styling logic
- Be reusable across the entire application
- Use Tailwind classes with CSS variables for consistency

**Example BaseButton Props:**
```typescript
interface Props {
  variant?: 'primary' | 'secondary' | 'ghost' | 'outline' | 'danger'
  size?: 'sm' | 'md' | 'lg' | 'xl'
  width?: 'narrow' | 'normal' | 'wide' | 'full'
  loading?: boolean
  disabled?: boolean
}
```

#### Feature Components (`components/Contact/`, `components/Album/`, etc.)
These compose base components and add specific functionality:
- Use base components as building blocks
- Handle business logic and data
- Keep styling minimal, delegate to base components

### 3. CSS Organization

#### Global Styles (`app/assets/css/main.css`)
- Define CSS variables for design tokens
- Create utility classes for common patterns
- Set up global component overrides
- Handle theme and color system

#### Component Styles
- Base components: Encapsulate all styling with props
- Feature components: Minimal styling, rely on base components
- Use `:deep()` selectors sparingly and only for necessary overrides

### 4. Design Token System

#### Color System
```css
/* Define your brand colors */
@theme static {
  --color-site-black: #010101;
  --color-site-gold-500: #c49326;
  /* ... other brand colors */
}

/* Map to Nuxt UI system */
:root {
  --ui-primary: var(--color-site-gold-500);
  --ui-bg: var(--color-site-black);
  --ui-text: var(--color-site-gold-100);
}
```

#### Component Variants
Use CSS variables and Tailwind classes to create consistent variants:
```css
.base-button-primary {
  background-color: var(--color-site-gold-500);
  color: var(--color-black);
}
```

### 5. Best Practices

#### Component Development
1. **Start with props**: Define all possible variants as props
2. **Use computed properties**: Map props to CSS classes
3. **Encapsulate styling**: Keep all component styles within the component
4. **Provide defaults**: Set sensible default values for all props

#### Styling Approach
1. **Tailwind first**: Use utility classes whenever possible
2. **CSS variables**: For design tokens and theme consistency
3. **Component-scoped**: Keep styles close to components
4. **Global utilities**: Only for truly global patterns

#### File Organization
```
app/
â”œâ”€â”€ components/
â”‚   â”œâ”€â”€ Base/           # Atomic design components
â”‚   â”‚   â”œâ”€â”€ Button.vue
â”‚   â”‚   â”œâ”€â”€ Input.vue
â”‚   â”‚   â””â”€â”€ Card.vue
â”‚   â”œâ”€â”€ Contact/        # Feature-specific components
â”‚   â”‚   â”œâ”€â”€ Form.vue
â”‚   â”‚   â”œâ”€â”€ Details.vue
â”‚   â”‚   â””â”€â”€ Header.vue
â”‚   â””â”€â”€ Album/          # Domain-specific components
â”œâ”€â”€ assets/css/
â”‚   â””â”€â”€ main.css        # Global styles and design tokens
â””â”€â”€ pages/
```

### 6. Development Workflow

#### Creating New Components
1. **Base Components**: Start with props interface, add styling variants
2. **Feature Components**: Compose base components, add business logic
3. **Global Styles**: Add new design tokens to main.css if needed

#### Styling New Features
1. Check if existing base components can be used
2. If not, create new base component with proper props
3. Use Tailwind classes with CSS variables for consistency
4. Test all variants and states

### 7. Migration from Legacy Projects

When migrating from older projects (like Nuxt 2 with Bulma):
1. **Audit existing styles**: Identify reusable patterns
2. **Create base components**: Convert common patterns to components
3. **Define design tokens**: Extract colors, spacing, typography
4. **Gradual migration**: Replace old components one by one
5. **Maintain consistency**: Use the same props and patterns across components

### 8. Future-Proofing

This approach ensures:
- **Consistency**: All components follow the same patterns
- **Maintainability**: Changes to design tokens affect all components
- **Reusability**: Base components work across different features
- **Scalability**: Easy to add new variants and components
- **Developer Experience**: Clear props and predictable behavior

---

## Project-Specific Information

### About This Project
This is a portfolio website for actor and model Benjamin Gijzel, showcasing his work in acting, modeling, and art.

### Key Features
- **Dynamic Mosaic Homepage**: Visual grid layout showcasing different portfolio categories
- **Album Galleries**: Interactive image galleries with lightbox viewing
- **Contact Form**: Netlify Forms integration for easy communication
- **Responsive Design**: Mobile-first approach with smooth animations

### Migration Notes
This project is a migration from a Nuxt 2 project that used:
- Bulma CSS framework
- Buefy UI components
- Vuex for state management

### Current Status
- âœ… Contact form migrated to Netlify Forms
- âœ… Base components created with prop-driven styling
- âœ… CSS cleaned up and organized
- âœ… Build process working
- ðŸ”„ Mosaic layout needs dynamic CMS integration
- ðŸ”„ Album galleries need enhanced UX
- ðŸ”„ Navigation needs modernization
